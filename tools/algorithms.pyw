# DESC: Ch∆∞∆°ng triÃÄnh taÃ£o thu√¢Ã£t toaÃÅn bƒÉÃÄng Gemini.
import sys
import os
import logging
import textwrap
import re
import threading
import queue
import time
import base64

from pathlib import Path
try:
    import google.generativeai as genai
    HAS_GEMINI = True
except ImportError:
    HAS_GEMINI = False

from PyQt5.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QFormLayout, QLabel, QLineEdit,
    QTextEdit, QPushButton, QFileDialog, QMessageBox, QWidget, QPlainTextEdit,
    QScrollArea, QSizePolicy, QGridLayout, QTabWidget, QProgressBar, QApplication,
    QTextBrowser
)
from PyQt5.QtCore import Qt, pyqtSignal, QObject, QTimer
from PyQt5.QtGui import QFont, QColor, QSyntaxHighlighter, QTextCharFormat, QDesktopServices, QIcon
from PyQt5.QtCore import QUrl

CONFIG_DIR = Path("../config")
API_KEY_FILE = CONFIG_DIR / "gemini.api"
ICON_FILE = CONFIG_DIR / "logo.png"
ALGORITHMS_DIR_DEFAULT = Path("../algorithms")


class PythonSyntaxHighlighter(QSyntaxHighlighter):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.highlightingRules = []

        keywordFormat = QTextCharFormat()
        keywordFormat.setForeground(QColor("#000080"))
        keywordFormat.setFontWeight(QFont.Bold)
        keywords = [
            "\\bFalse\\b", "\\bNone\\b", "\\bTrue\\b", "\\band\\b", "\\bas\\b",
            "\\bassert\\b", "\\basync\\b", "\\bawait\\b", "\\bbreak\\b", "\\bclass\\b",
            "\\bcontinue\\b", "\\bdef\\b", "\\bdel\\b", "\\belif\\b", "\\belse\\b",
            "\\bexcept\\b", "\\bfinally\\b", "\\bfor\\b", "\\bfrom\\b", "\\bglobal\\b",
            "\\bif\\b", "\\bimport\\b", "\\bin\\b", "\\bis\\b", "\\blambda\\b",
            "\\bnonlocal\\b", "\\bnot\\b", "\\bor\\b", "\\bpass\\b", "\\braise\\b",
            "\\breturn\\b", "\\btry\\b", "\\bwhile\\b", "\\bwith\\b", "\\byield\\b",
            "\\bself\\b", "\\bin\\b", "\\bisinstance\\b", "\\bint\\b", "\\bfloat\\b",
            "\\bstr\\b", "\\blist\\b", "\\bdict\\b", "\\btuple\\b", "\\bset\\b", "\\bdatetime\\b"
        ]
        for word in keywords:
            rule = (re.compile(word), keywordFormat)
            self.highlightingRules.append(rule)

        selfFormat = QTextCharFormat()
        selfFormat.setForeground(QColor("#900090"))
        rule = (re.compile("\\bself\\."), selfFormat)
        self.highlightingRules.append(rule)

        stringFormat = QTextCharFormat()
        stringFormat.setForeground(QColor("#008000"))
        self.highlightingRules.append((re.compile("\".*?\""), stringFormat))
        self.highlightingRules.append((re.compile("'.*?'"), stringFormat))
        self.highlightingRules.append((re.compile("\"\"\"(.*?)\"\"\"", re.DOTALL), stringFormat))
        self.highlightingRules.append((re.compile("'''(.*?)'''", re.DOTALL), stringFormat))


        numberFormat = QTextCharFormat()
        numberFormat.setForeground(QColor("#0000FF"))
        self.highlightingRules.append((re.compile("\\b[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?\\b"), numberFormat))

        commentFormat = QTextCharFormat()
        commentFormat.setForeground(QColor("#808080"))
        commentFormat.setFontItalic(True)
        self.highlightingRules.append((re.compile("#[^\n]*"), commentFormat))

        functionFormat = QTextCharFormat()
        functionFormat.setForeground(QColor("#A020F0"))
        functionFormat.setFontWeight(QFont.Bold)
        self.highlightingRules.append((re.compile("\\b[A-Za-z_][A-Za-z0-9_]*(?=\\()"), functionFormat))

        classFormat = QTextCharFormat()
        classFormat.setForeground(QColor("#2E8B57"))
        classFormat.setFontWeight(QFont.Bold)
        self.highlightingRules.append((re.compile("\\b[A-Z][a-zA-Z0-9_]*\\b"), classFormat))


    def highlightBlock(self, text):
        for pattern, format_obj in self.highlightingRules:
            for match in pattern.finditer(text):
                start, end = match.span()
                self.setFormat(start, end - start, format_obj)



class GeminiWorker(QObject):
    result_ready = pyqtSignal(str)
    error_occurred = pyqtSignal(str)
    status_update = pyqtSignal(str)

    def __init__(self, api_key, prompt):
        super().__init__()
        self.api_key = api_key
        self.prompt = prompt
        self._is_running = True

    def run(self):
        if not HAS_GEMINI:
            self.error_occurred.emit("Th∆∞ vi·ªán 'google-generativeai' ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t.")
            return

        try:
            self.status_update.emit("ƒêang c·∫•u h√¨nh Gemini...")
            genai.configure(api_key=self.api_key)

            self.status_update.emit("ƒêang t·∫°o m√¥ h√¨nh Gemini...")
            model = genai.GenerativeModel('gemini-1.5-flash')

            self.status_update.emit("ƒêang g·ª≠i y√™u c·∫ßu ƒë·∫øn Gemini API...")
            response = model.generate_content(self.prompt)

            self.status_update.emit("ƒê√£ nh·∫≠n ph·∫£n h·ªìi t·ª´ Gemini.")
            generated_text = response.text
            self.result_ready.emit(generated_text)

        except ValueError as ve:
             if "API_KEY" in str(ve) or "api key not valid" in str(ve).lower():
                  self.error_occurred.emit(f"L·ªói API Key: {ve}. Vui l√≤ng ki·ªÉm tra l·∫°i.")
             else:
                  self.error_occurred.emit(f"L·ªói gi√° tr·ªã khi g·ªçi Gemini: {ve}")
        except Exception as e:
            logging.error(f"L·ªói khi g·ªçi Gemini API: {e}", exc_info=True)
            error_message = f"L·ªói giao ti·∫øp v·ªõi Gemini API: {type(e).__name__}. Chi ti·∫øt: {e}"
            if "api key not valid" in str(e).lower():
                 error_message = "L·ªói: API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i."
            elif "permission denied" in str(e).lower() or "quota" in str(e).lower():
                 error_message = "L·ªói: C√≥ th·ªÉ API key h·∫øt h·∫°n, h·∫øt quota ho·∫∑c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p m√¥ h√¨nh."
            elif "Deadline Exceeded" in str(e):
                 error_message = "L·ªói: Y√™u c·∫ßu t·ªõi Gemini b·ªã qu√° th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i."
            elif "resource exhausted" in str(e).lower():
                 error_message = "L·ªói: T√†i nguy√™n ho·∫∑c quota ƒë√£ h·∫øt. Vui l√≤ng ki·ªÉm tra t√†i kho·∫£n Google AI/Cloud."
            self.error_occurred.emit(error_message)

class AlgorithmGeminiBuilderDialog(QDialog):
    def __init__(self, parent=None, algorithms_dir=None):
        super().__init__(parent)
        self.setWindowTitle("Algorithm Generation")
        self.setMinimumSize(850, 700)
        self.algorithms_dir = Path(algorithms_dir) if algorithms_dir else ALGORITHMS_DIR_DEFAULT
        self.generated_code = ""
        self.api_key = ""
        self.gemini_thread = None
        self.gemini_worker = None
        self.start_time = None

        self._set_window_icon()

        self._load_api_key()

        self._setup_ui()

    def _set_window_icon(self):
        """Sets the window icon if config/logo.png exists."""
        if ICON_FILE.is_file():
            self.setWindowIcon(QIcon(str(ICON_FILE)))
        else:
            logging.warning(f"Icon file not found: {ICON_FILE}")

    def _load_api_key(self):
        """Loads the API key from the encoded file."""
        try:
            CONFIG_DIR.mkdir(parents=True, exist_ok=True)
            if API_KEY_FILE.is_file():
                encoded_key = API_KEY_FILE.read_bytes()
                self.api_key = base64.b64decode(encoded_key).decode('utf-8')
                logging.info(f"Loaded API key from {API_KEY_FILE}")
            else:
                self.api_key = ""
                logging.info(f"API key file not found: {API_KEY_FILE}. Key is empty.")
        except (IOError, base64.binascii.Error, UnicodeDecodeError) as e:
            logging.error(f"Failed to load or decode API key from {API_KEY_FILE}: {e}")
            self.api_key = ""

    def _save_api_key(self):
        """Saves the current API key to the encoded file."""
        key_to_save = self.api_key_edit.text().strip()
        try:
            CONFIG_DIR.mkdir(parents=True, exist_ok=True)
            encoded_key = base64.b64encode(key_to_save.encode('utf-8'))
            API_KEY_FILE.write_bytes(encoded_key)
            self.api_key = key_to_save
            logging.info(f"Saved API key to {API_KEY_FILE}")
            return True
        except IOError as e:
            logging.error(f"Failed to save API key to {API_KEY_FILE}: {e}")
            QMessageBox.critical(self, "L·ªói L∆∞u API Key", f"Kh√¥ng th·ªÉ l∆∞u API key v√†o file:\n{e}")
            return False

    def _setup_ui(self):
        main_layout = QVBoxLayout(self)
        self.tab_widget = QTabWidget()
        main_layout.addWidget(self.tab_widget)

        generator_widget = QWidget()
        generator_layout = QVBoxLayout(generator_widget)
        generator_layout.setSpacing(10)

        info_form = QFormLayout()
        info_form.setSpacing(8)
        self.file_name_edit = QLineEdit()
        self.file_name_edit.setPlaceholderText("V√≠ d·ª•: advanced_frequency")
        self.file_name_edit.textChanged.connect(self._suggest_class_name)
        info_form.addRow("üìóT√™n file:", self.file_name_edit)

        self.class_name_edit = QLineEdit()
        self.class_name_edit.setPlaceholderText("V√≠ d·ª•: AdvancedFrequencyAlgorithm")
        info_form.addRow("üìíT√™n L·ªõp (Class):", self.class_name_edit)

        self.description_edit = QLineEdit()
        self.description_edit.setPlaceholderText("M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ thu·∫≠t to√°n")
        info_form.addRow("‚ôªÔ∏èM√¥ t·∫£ thu·∫≠t to√°n:", self.description_edit)
        generator_layout.addLayout(info_form)

        logic_label = QLabel("‚úçÔ∏è M√¥ t·∫£ thu√¢Ã£t toaÃÅn (ti·∫øng Vi·ªát ho·∫∑c Anh):")
        generator_layout.addWidget(logic_label)
        self.logic_description_edit = QPlainTextEdit()
        self.logic_description_edit.setPlaceholderText(
            "V√≠ d·ª•:\n"
            "- T√≠nh ƒëi·ªÉm d·ª±a tr√™n t·∫ßn su·∫•t xu·∫•t hi·ªán trong 90 ng√†y qua.\n"
            "- C·ªông th√™m ƒëi·ªÉm n·∫øu s·ªë ƒë√≥ l√† s·ªë l√¢n c·∫≠n (trong kho·∫£ng +/- 3) c·ªßa gi·∫£i ƒë·∫∑c bi·ªát ng√†y h√¥m tr∆∞·ªõc.\n"
            "- Gi·∫£m ƒëi·ªÉm m·∫°nh n·∫øu s·ªë ƒë√≥ ƒë√£ v·ªÅ trong 2 ng√†y li√™n ti·∫øp g·∫ßn ƒë√¢y.\n"
            "- ∆Øu ti√™n c√°c s·ªë kh√¥ng xu·∫•t hi·ªán trong 10 ng√†y g·∫ßn nh·∫•t...\n"
            "(C√†ng chi ti·∫øt, Gemini c√†ng t·∫°o code t·ªët h∆°n)"
        )
        self.logic_description_edit.setMinimumHeight(120)
        generator_layout.addWidget(self.logic_description_edit)

        self.generate_button = QPushButton("üß†T·∫°o Thu·∫≠t To√°n")
        self.generate_button.setStyleSheet("padding: 8px;")
        self.generate_button.clicked.connect(self._generate_algorithm)
        generator_layout.addWidget(self.generate_button)

        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 0)
        self.progress_bar.setVisible(False)
        self.progress_bar.setFixedHeight(10)
        generator_layout.addWidget(self.progress_bar)

        self.status_label = QLabel("Tr·∫°ng th√°i: S·∫µn s√†ng")
        self.status_label.setStyleSheet("color: #6c757d;")
        generator_layout.addWidget(self.status_label)

        code_label = QLabel("N·ªôi dung thu·∫≠t to√°n:")
        generator_layout.addWidget(code_label)
        self.generated_code_display = QPlainTextEdit()
        self.generated_code_display.setReadOnly(True)
        font = QFont("Consolas", 10)
        if not font.exactMatch(): font = QFont("Courier", 10)
        self.generated_code_display.setFont(font)

        self.generated_code_display.setMinimumHeight(200)
        self.highlighter = PythonSyntaxHighlighter(self.generated_code_display.document())
        generator_layout.addWidget(self.generated_code_display, 1)

        button_layout = QHBoxLayout()
        button_layout.addStretch(1)

        self.copy_button = QPushButton("üìÑSao ch√©p")
        self.copy_button.setEnabled(False)
        self.copy_button.setStyleSheet("padding: 8px;")
        self.copy_button.clicked.connect(self._copy_generated_code)
        button_layout.addWidget(self.copy_button)

        self.save_button = QPushButton("üíæ L∆∞u")
        self.save_button.setEnabled(False)
        self.save_button.setStyleSheet("padding: 8px;")
        self.save_button.clicked.connect(self._save_algorithm_file)
        button_layout.addWidget(self.save_button)

        generator_layout.addLayout(button_layout)

        settings_widget = QWidget()
        settings_layout = QVBoxLayout(settings_widget)
        settings_layout.setSpacing(10)
        settings_layout.setAlignment(Qt.AlignTop)

        api_group = QWidget()
        api_layout = QHBoxLayout(api_group)
        api_layout.setContentsMargins(0,0,0,0)
        api_layout.addWidget(QLabel("üîëGemini API Key:"))
        self.api_key_edit = QLineEdit(self.api_key)
        self.api_key_edit.setEchoMode(QLineEdit.Password)
        self.api_key_edit.setPlaceholderText("Nh·∫≠p API Key c·ªßa Google AI Studio / Vertex AI")
        self.api_key_edit.editingFinished.connect(self._save_api_key)
        api_layout.addWidget(self.api_key_edit, 1)

        show_api_button = QPushButton("üëÅ‚Äçüó®Hi·ªán")
        show_api_button.setCheckable(True)
        show_api_button.toggled.connect(self._toggle_api_key_visibility)
        api_layout.addWidget(show_api_button)

        settings_layout.addWidget(api_group)

        save_info_label = QLabel("<i>API Key s·∫Ω ƒë∆∞·ª£c m√£ h√≥a v√† l∆∞u t·ª± ƒë·ªông v√†o file <code>config/gemini.api</code> khi b·∫°n thay ƒë·ªïi ho·∫∑c ƒë√≥ng c·ª≠a s·ªï.</i>")
        save_info_label.setWordWrap(True)
        save_info_label.setStyleSheet("color: #6c757d; font-size: 9pt;")
        settings_layout.addWidget(save_info_label)


        api_help_label = QLabel("<b>H∆∞·ªõng d·∫´n l·∫•y Gemini API Key:</b>")
        settings_layout.addWidget(api_help_label)

        help_text_content = self._get_api_key_help_text()
        api_help_display = QTextBrowser()
        api_help_display.setOpenExternalLinks(True)
        api_help_display.setHtml(help_text_content.replace("\n", "<br/>").replace("https://aistudio.google.com/",'<a href="https://aistudio.google.com/">https://aistudio.google.com/</a>'))
        api_help_display.setFixedHeight(180)
        api_help_display.setStyleSheet("border: 1px solid #ccc; background-color: #f8f9fa; padding: 5px;")

        settings_layout.addWidget(api_help_display)
        settings_layout.addStretch(1)

        self.tab_widget.addTab(generator_widget, "üß© Tr√¨nh T·∫°o Thu·∫≠t To√°n")
        self.tab_widget.addTab(settings_widget, "‚öôÔ∏è C√†i ƒê·∫∑t")


    def _toggle_api_key_visibility(self, checked):
        if checked:
            self.api_key_edit.setEchoMode(QLineEdit.Normal)
            sender = self.sender()
            if sender: sender.setText("·∫®n")
        else:
            self.api_key_edit.setEchoMode(QLineEdit.Password)
            sender = self.sender()
            if sender: sender.setText("Hi·ªán")

    def _get_api_key_help_text(self) -> str:
        """Returns the help text for getting the API key."""
        return textwrap.dedent("""
        1. Truy c·∫≠p Google AI Studio: https://aistudio.google.com/
           (Ho·∫∑c Google Cloud Console n·∫øu d√πng Vertex AI)
        2. ƒêƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n Google c·ªßa b·∫°n.
        3. Trong Google AI Studio:
           - Nh·∫•p v√†o "Get API key" ·ªü thanh b√™n tr√°i.
           - Nh·∫•p v√†o "Create API key in new project" (ho·∫∑c ch·ªçn d·ª± √°n c√≥ s·∫µn).
           - Sao ch√©p API key ƒë∆∞·ª£c t·∫°o ra.
        4. D√°n API key v√†o √¥ tr√™n.

        <b>L∆∞u √Ω:</b> Gi·ªØ API key c·ªßa b·∫°n b√≠ m·∫≠t v√† an to√†n. Kh√¥ng chia s·∫ª c√¥ng khai.
        Vi·ªác s·ª≠ d·ª•ng API c√≥ th·ªÉ ph√°t sinh chi ph√≠ tu·ª≥ theo ch√≠nh s√°ch c·ªßa Google.
        """)


    def _suggest_class_name(self, filename_base):
        """G·ª£i √Ω t√™n l·ªõp d·ª±a tr√™n t√™n file (kh√¥ng c√≥ .py)."""
        class_name = "".join(word.capitalize() for word in filename_base.split('_') if word)
        class_name = re.sub(r'[^a-zA-Z0-9_]', '', class_name)
        if class_name and class_name[0].isdigit():
            class_name = "_" + class_name
        if not class_name:
            class_name = "MyGeminiAlgorithm"
        else:
            class_name = class_name + "Algorithm"


        current_class_name = self.class_name_edit.text()
        if not current_class_name or current_class_name == getattr(self, "_last_suggested_class_name", ""):
             self.class_name_edit.setText(class_name)
             self._last_suggested_class_name = class_name

    def _validate_inputs(self) -> bool:
        """Ki·ªÉm tra c√°c tr∆∞·ªùng nh·∫≠p li·ªáu c·∫ßn thi·∫øt."""
        self.api_key = self.api_key_edit.text().strip()
        file_name_base = self.file_name_edit.text().strip()
        class_name = self.class_name_edit.text().strip()
        logic_desc = self.logic_description_edit.toPlainText().strip()

        if not self.api_key:
            QMessageBox.warning(self, "Thi·∫øu API Key", "Vui l√≤ng nh·∫≠p Gemini API Key trong tab 'C√†i ƒê·∫∑t'.")
            self.tab_widget.setCurrentIndex(1)
            self.api_key_edit.setFocus()
            return False
        if not HAS_GEMINI:
            QMessageBox.critical(self, "Thi·∫øu Th∆∞ Vi·ªán", "Vui l√≤ng c√†i ƒë·∫∑t th∆∞ vi·ªán 'google-generativeai' b·∫±ng l·ªánh:\n\npip install google-generativeai")
            return False
        if not re.match(r"^[a-zA-Z0-9_]+$", file_name_base):
            QMessageBox.warning(self, "T√™n file kh√¥ng h·ª£p l·ªá", "T√™n file ch·ªâ n√™n ch·ª©a ch·ªØ c√°i, s·ªë v√† d·∫•u g·∫°ch d∆∞·ªõi (_).")
            self.tab_widget.setCurrentIndex(0)
            self.file_name_edit.setFocus()
            return False
        if not re.match(r"^[a-zA-Z_][a-zA-Z0-9_]*$", class_name) or class_name == "BaseAlgorithm":
            QMessageBox.warning(self, "T√™n l·ªõp kh√¥ng h·ª£p l·ªá", "T√™n l·ªõp ph·∫£i l√† ƒë·ªãnh danh Python h·ª£p l·ªá v√† kh√¥ng tr√πng 'BaseAlgorithm'.")
            self.tab_widget.setCurrentIndex(0)
            self.class_name_edit.setFocus()
            return False
        if not logic_desc:
            QMessageBox.warning(self, "Thi·∫øu M√¥ T·∫£ Logic", "Vui l√≤ng m√¥ t·∫£ logic b·∫°n mu·ªën cho thu·∫≠t to√°n.")
            self.tab_widget.setCurrentIndex(0)
            self.logic_description_edit.setFocus()
            return False
        return True

    def _get_base_algorithm_code(self) -> str:
        """L·∫•y n·ªôi dung code c·ªßa l·ªõp BaseAlgorithm."""
        try:
            base_path = Path(__file__).parent.parent / "algorithms" / "base.py"
            if not base_path.exists():
                 base_path = Path("algorithms") / "base.py"

            if base_path.exists():
                logging.info(f"Reading BaseAlgorithm from: {base_path}")
                return base_path.read_text(encoding='utf-8')
            else:
                logging.warning(f"BaseAlgorithm file not found at expected locations: {base_path}")
                return textwrap.dedent("""
                    # Base class (summary - file not found at expected location)
                    from abc import ABC, abstractmethod
                    import datetime
                    import logging
                    from pathlib import Path # Added Path

                    class BaseAlgorithm(ABC):
                        # Simplified init
                        def __init__(self, data_results_list=None, cache_dir=None):
                            self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
                            self.config = {"description": "Base", "parameters": {}}
                            self._raw_results_list = data_results_list if data_results_list is not None else []
                            self.cache_dir = Path(cache_dir) if cache_dir else None
                            # Assume basic logging setup happens elsewhere
                            # self._log('debug', f"{self.__class__.__name__} initialized.") # Can't use _log before it might be defined

                        def get_config(self) -> dict: return self.config

                        @abstractmethod
                        def predict(self, date_to_predict: datetime.date, historical_results: list) -> dict:
                            # MUST return dict like {'00': score, ..., '99': score}
                            raise NotImplementedError

                        # Include simplified helper methods if needed by the prompt
                        def extract_numbers_from_dict(self, result_dict: dict) -> set:
                             # Simple placeholder if base.py not found
                             numbers = set()
                             if isinstance(result_dict, dict):
                                 # Simplified: check common keys like 'gdb', 'g1', etc.
                                 for key, value in result_dict.items():
                                     if isinstance(value, str) and value.isdigit() and len(value) >= 2:
                                         numbers.add(value[-2:])
                                     elif isinstance(value, list): # Handle lists like lo_to
                                         for item in value:
                                             if isinstance(item, str) and item.isdigit() and len(item) == 2:
                                                 numbers.add(item)
                             return {f"{int(n):02d}" for n in numbers if n.isdigit() and 0 <= int(n) <= 99} # Ensure 00-99 format


                        def _log(self, level: str, message: str):
                            log_method = getattr(self.logger, level.lower(), self.logger.info) # Default to info
                            log_method(message)
                """)
        except Exception as e:
            logging.error(f"Error reading base algorithm code: {e}")
            return f"# Error: Could not read base algorithm code: {e}"

    def _construct_prompt(self) -> str | None:
        """X√¢y d·ª±ng prompt chi ti·∫øt cho Gemini."""
        file_name_base = self.file_name_edit.text().strip()
        full_file_name = f"{file_name_base}.py"
        class_name = self.class_name_edit.text().strip()
        algo_description = self.description_edit.text().strip().replace('"', '\\"')
        logic_description = self.logic_description_edit.toPlainText().strip()
        base_algo_code = self._get_base_algorithm_code()

        if not algo_description:
            algo_description = f"Algorithm generated based on user description for {class_name}"

        prompt = textwrap.dedent(f"""
        B·∫°n l√† m·ªôt l·∫≠p tr√¨nh vi√™n Python chuy√™n nghi·ªáp, chuy√™n t·∫°o c√°c thu·∫≠t to√°n d·ª± ƒëo√°n x·ªï s·ªë cho m·ªôt ·ª©ng d·ª•ng c·ª• th·ªÉ.
        Nhi·ªám v·ª• c·ªßa b·∫°n l√† t·∫°o ra ƒêO·∫†N CODE PYTHON HO√ÄN CH·ªàNH cho m·ªôt l·ªõp thu·∫≠t to√°n m·ªõi d·ª±a tr√™n m√¥ t·∫£ c·ªßa ng∆∞·ªùi d√πng.

        **B·ªëi c·∫£nh:**
        *   Thu·∫≠t to√°n m·ªõi ph·∫£i k·∫ø th·ª´a t·ª´ l·ªõp `BaseAlgorithm`. D∆∞·ªõi ƒë√¢y l√† n·ªôi dung c·ªßa file `algorithms/base.py` m√† l·ªõp cha ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a:
            ```python
            {textwrap.indent(base_algo_code, '            ')}
            ```
        *   L·ªõp thu·∫≠t to√°n m·ªõi s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o file t√™n l√† `{full_file_name}` trong th∆∞ m·ª•c `algorithms`.
        *   T√™n c·ªßa l·ªõp m·ªõi ph·∫£i l√† `{class_name}`.
        *   M√¥ t·∫£ chung c·ªßa thu·∫≠t to√°n (d√πng cho `self.config['description']`) l√†: "{algo_description}"

        **Y√™u c·∫ßu ch√≠nh:**
        Vi·∫øt code Python ƒë·∫ßy ƒë·ªß cho l·ªõp `{class_name}` bao g·ªìm:
        1.  Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt (v√≠ d·ª•: `datetime`, `logging`, `collections`, `math`, `numpy` n·∫øu c·∫ßn t√≠nh to√°n ph·ª©c t·∫°p, `pathlib`). PH·∫¢I import `BaseAlgorithm` t·ª´ `.base`.
        2.  ƒê·ªãnh nghƒ©a l·ªõp `{class_name}` k·∫ø th·ª´a t·ª´ `BaseAlgorithm`. (`class {class_name}(BaseAlgorithm):`)
        3.  Tri·ªÉn khai ph∆∞∆°ng th·ª©c `__init__(self, *args, **kwargs)`:
            *   Ph·∫£i g·ªçi `super().__init__(*args, **kwargs)`.
            *   Kh·ªüi t·∫°o `self.config` v·ªõi `description` ƒë√£ cho v√† m·ªôt dictionary `parameters` r·ªóng (ho·∫∑c n·∫øu b·∫°n suy lu·∫≠n ƒë∆∞·ª£c tham s·ªë t·ª´ m√¥ t·∫£ logic, h√£y th√™m ch√∫ng v√†o ƒë√¢y v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh h·ª£p l√Ω).
            *   V√≠ d·ª•: `self.config = {{'description': "{algo_description}", 'parameters': {{'param1': default_value}} }}`
            *   C√≥ th·ªÉ kh·ªüi t·∫°o c√°c thu·ªôc t√≠nh kh√°c n·∫øu c·∫ßn cho logic (v√≠ d·ª•: `self.some_data = {{}}`).
            *   Th√™m d√≤ng log debug b√°o hi·ªáu kh·ªüi t·∫°o: `self._log('debug', f"{{self.__class__.__name__}} initialized.")`
        4.  Tri·ªÉn khai ph∆∞∆°ng th·ª©c `predict(self, date_to_predict: datetime.date, historical_results: list) -> dict`:
            *   Ph∆∞∆°ng th·ª©c n√†y nh·∫≠n ng√†y c·∫ßn d·ª± ƒëo√°n (`date_to_predict`) v√† danh s√°ch k·∫øt qu·∫£ l·ªãch s·ª≠ (`historical_results`) **tr∆∞·ªõc** ng√†y ƒë√≥. `historical_results` l√† list c·ªßa dict, m·ªói dict c√≥ d·∫°ng `{{'date': date_obj, 'result': dict_ket_qua_ngay_do}}`.
            *   **Logic c·ªët l√µi:** D·ª±a v√†o m√¥ t·∫£ logic do ng∆∞·ªùi d√πng cung c·∫•p d∆∞·ªõi ƒë√¢y ƒë·ªÉ t√≠nh to√°n ƒëi·ªÉm s·ªë.
            *   **M√¥ t·∫£ Logic c·ªßa ng∆∞·ªùi d√πng:**
                ```
                {textwrap.indent(logic_description, '                ')}
                ```
            *   **Quan tr·ªçng:** Ph∆∞∆°ng th·ª©c `predict` **PH·∫¢I** tr·∫£ v·ªÅ m·ªôt dictionary ch·ª©a ƒëi·ªÉm s·ªë (float ho·∫∑c int) cho T·∫§T C·∫¢ c√°c s·ªë t·ª´ "00" ƒë·∫øn "99". V√≠ d·ª•: `{{'00': 10.5, '01': -2.0, ..., '99': 5.0}}`. N·∫øu kh√¥ng c√≥ ƒëi·ªÉm cho s·ªë n√†o ƒë√≥, h√£y tr·∫£ v·ªÅ 0.0 cho s·ªë ƒë√≥. Kh·ªüi t·∫°o `scores = {{f'{{i:02d}}': 0.0 for i in range(100)}}` l√† m·ªôt kh·ªüi ƒë·∫ßu t·ªët.
            *   S·ª≠ d·ª•ng c√°c h√†m c√≥ s·∫µn t·ª´ `BaseAlgorithm`: `self.extract_numbers_from_dict(result_dict)` ƒë·ªÉ l·∫•y c√°c s·ªë d·∫°ng '00'-'99' t·ª´ k·∫øt qu·∫£ c·ªßa m·ªôt ng√†y, `self._log('level', 'message')` ƒë·ªÉ ghi log (c√°c level th√¥ng d·ª•ng: 'debug', 'info', 'warning', 'error').
            *   N√™n c√≥ log debug ·ªü ƒë·∫ßu h√†m (`self._log('debug', f"Predicting for {{date_to_predict}}")`) v√† log info ·ªü cu·ªëi (`self._log('info', f"Prediction finished for {{date_to_predict}}. Generated {{len(scores)}} scores.")`).
            *   X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p ngo·∫°i l·ªá (v√≠ d·ª•: kh√¥ng ƒë·ªß d·ªØ li·ªáu `historical_results`, l·ªói t√≠nh to√°n) m·ªôt c√°ch h·ª£p l√Ω. N·∫øu kh√¥ng th·ªÉ t√≠nh to√°n, tr·∫£ v·ªÅ dict `scores` v·ªõi t·∫•t c·∫£ ƒëi·ªÉm l√† 0.0.
            *   ƒê·∫£m b·∫£o code trong `predict` hi·ªáu qu·∫£, tr√°nh l·∫∑p l·∫°i t√≠nh to√°n kh√¥ng c·∫ßn thi·∫øt n·∫øu c√≥ th·ªÉ.

        **ƒê·ªãnh d·∫°ng Output:**
        Ch·ªâ cung c·∫•p ph·∫ßn code Python ho√†n ch·ªânh cho file `{full_file_name}`.
        B·∫Øt ƒë·∫ßu b·∫±ng `# -*- coding: utf-8 -*-`.
        Ti·∫øp theo l√† `# File: {full_file_name}`.
        Sau ƒë√≥ l√† import `BaseAlgorithm` v√† c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt kh√°c.
        R·ªìi ƒë·∫øn ƒë·ªãnh nghƒ©a l·ªõp `{class_name}` v√† c√°c ph∆∞∆°ng th·ª©c c·ªßa n√≥ (`__init__`, `predict`).
        KH√îNG th√™m b·∫•t k·ª≥ gi·∫£i th√≠ch, l·ªùi b√¨nh lu·∫≠n hay ```python ``` n√†o b√™n ngo√†i kh·ªëi code ch√≠nh.
        ƒê·∫£m b·∫£o code s·∫°ch s·∫Ω, d·ªÖ ƒë·ªçc, tu√¢n th·ªß PEP 8 v√† c√≥ th·ª•t l·ªÅ ƒë√∫ng chu·∫©n Python (4 d·∫•u c√°ch).
        """)

        return prompt.strip()


    def _generate_algorithm(self):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o thu·∫≠t to√°n."""
        if not self._validate_inputs():
            return

        if not self._save_api_key():
             QMessageBox.warning(self, "L·ªói L∆∞u Key", "Kh√¥ng th·ªÉ l∆∞u API key, vui l√≤ng ki·ªÉm tra l·∫°i.")

        prompt = self._construct_prompt()
        if prompt is None:
            QMessageBox.critical(self, "L·ªói T·∫°o Prompt", "Kh√¥ng th·ªÉ t·∫°o y√™u c·∫ßu cho Gemini.")
            return

        self.generated_code = ""
        self.generated_code_display.setPlainText("")
        self.save_button.setEnabled(False)
        self.copy_button.setEnabled(False)
        self.generate_button.setEnabled(False)
        self.progress_bar.setVisible(True)
        self.status_label.setText("Tr·∫°ng th√°i: ƒêang li√™n l·∫°c v·ªõi Gemini API...")
        self.status_label.setStyleSheet("color: #ffc107;")
        self.start_time = time.time()

        self.gemini_worker = GeminiWorker(self.api_key, prompt)
        self.gemini_thread = threading.Thread(target=self.gemini_worker.run, daemon=True)

        self.gemini_worker.result_ready.connect(self._handle_gemini_response)
        self.gemini_worker.error_occurred.connect(self._handle_gemini_error)
        self.gemini_worker.status_update.connect(self._update_status_from_worker)

        self.gemini_thread.start()

    def _update_status_from_worker(self, message):
        """C·∫≠p nh·∫≠t status label t·ª´ worker thread."""
        if self.start_time:
             elapsed = time.time() - self.start_time
             self.status_label.setText(f"Tr·∫°ng th√°i: {message} ({elapsed:.1f}s)")
        else:
             self.status_label.setText(f"Tr·∫°ng th√°i: {message}")
        self.status_label.setStyleSheet("color: #070bff;")

    def _handle_gemini_response(self, generated_text):
        """X·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ Gemini."""
        elapsed = time.time() - self.start_time if self.start_time else 0
        self.progress_bar.setVisible(False)
        self.generate_button.setEnabled(True)
        self.status_label.setText(f"Tr·∫°ng th√°i: ƒê√£ nh·∫≠n k·∫øt qu·∫£. ƒêang x·ª≠ l√Ω... ({elapsed:.1f}s)")
        self.status_label.setStyleSheet("color: #17a2b8;")
        logging.debug("Gemini response received:\n" + generated_text[:500] + "...")

        code_match = re.search(r"```(?:python)?\s*([\s\S]*?)\s*```", generated_text, re.IGNORECASE)
        if code_match:
            self.generated_code = code_match.group(1).strip()
            logging.info("Successfully extracted Python code block from Gemini response.")
        else:
            lines = generated_text.strip().splitlines()
            if lines and (lines[0].startswith("# -*- coding: utf-8 -*-") or lines[0].startswith("# File:") or lines[0].startswith("import ") or lines[0].startswith("from ")):
                 self.generated_code = "\n".join(lines)
                 logging.warning("Could not find ```python block, assuming response is code based on starting lines.")
            else:
                 logging.warning("Could not find ```python block and response does not start like Python code. Displaying raw response.")
                 self.generated_code = f"# --- RAW GEMINI RESPONSE (Could not extract Python code) ---\n# {generated_text}"
                 QMessageBox.warning(self, "Kh√¥ng t√¨m th·∫•y Code", "Gemini ƒë√£ ph·∫£n h·ªìi, nh∆∞ng kh√¥ng th·ªÉ t·ª± ƒë·ªông tr√≠ch xu·∫•t kh·ªëi code Python. Vui l√≤ng ki·ªÉm tra v√† ch·ªânh s·ª≠a th·ªß c√¥ng.")


        self.generated_code_display.setPlainText(self.generated_code)

        if self.generated_code and not self.generated_code.startswith("# --- RAW GEMINI RESPONSE"):
            self.save_button.setEnabled(True)
            self.copy_button.setEnabled(True)
            status_message = f"Tr·∫°ng th√°i: ƒê√£ t·∫°o code th√†nh c√¥ng. S·∫µn s√†ng ƒë·ªÉ l∆∞u. ({elapsed:.1f}s)"
            status_color = "#28a745;"
        else:
             self.save_button.setEnabled(False)
             self.copy_button.setEnabled(True)
             status_message = f"Tr·∫°ng th√°i: Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c code. Hi·ªÉn th·ªã ph·∫£n h·ªìi th√¥. ({elapsed:.1f}s)"
             status_color = "#ffc107;"

        self.status_label.setText(status_message)
        self.status_label.setStyleSheet(f"color: {status_color};")
        self.start_time = None


    def _handle_gemini_error(self, error_message):
        """X·ª≠ l√Ω l·ªói tr·∫£ v·ªÅ t·ª´ worker."""
        elapsed = time.time() - self.start_time if self.start_time else 0
        logging.error(f"Gemini worker error: {error_message}")
        QMessageBox.critical(self, "L·ªói Gemini API", error_message)

        self.generated_code = ""
        self.generated_code_display.setPlainText(f"# L·ªói x·∫£y ra:\n# {error_message}")
        self.save_button.setEnabled(False)
        self.copy_button.setEnabled(False)
        self.generate_button.setEnabled(True)
        self.progress_bar.setVisible(False)
        status_text = f"Tr·∫°ng th√°i: L·ªói - {error_message} ({elapsed:.1f}s)"
        if len(status_text) > 150:
            status_text = status_text[:147] + "..."
        self.status_label.setText(status_text)
        self.status_label.setStyleSheet("color: #dc3545;")
        self.start_time = None


    def _copy_generated_code(self):
        """Copies the generated code to the clipboard."""
        code_to_copy = self.generated_code_display.toPlainText()
        if code_to_copy:
            clipboard = QApplication.clipboard()
            clipboard.setText(code_to_copy)
            self.status_label.setText("Tr·∫°ng th√°i: ƒê√£ sao ch√©p code v√†o clipboard!")
            self.status_label.setStyleSheet("color: #17a2b8;")
            QTimer.singleShot(2000, lambda: self.status_label.setText("Tr·∫°ng th√°i: S·∫µn s√†ng"))
        else:
            QMessageBox.warning(self, "Ch∆∞a c√≥ Code", "Kh√¥ng c√≥ code n√†o ƒë·ªÉ sao ch√©p.")


    def _save_algorithm_file(self):
        """L∆∞u code ƒë√£ t·∫°o v√†o file."""
        if not self.generated_code or self.generated_code.startswith("# --- RAW GEMINI RESPONSE"):
            QMessageBox.warning(self, "Ch∆∞a c√≥ Code H·ª£p L·ªá", "Ch∆∞a c√≥ code h·ª£p l·ªá ƒë∆∞·ª£c t·∫°o ƒë·ªÉ l∆∞u.")
            return

        file_name_base = self.file_name_edit.text().strip()
        if not re.match(r"^[a-zA-Z0-9_]+$", file_name_base):
            QMessageBox.warning(self, "T√™n file kh√¥ng h·ª£p l·ªá", "Vui l√≤ng ki·ªÉm tra l·∫°i t√™n file (ch·ªâ ch·ªØ c√°i, s·ªë, g·∫°ch d∆∞·ªõi) tr∆∞·ªõc khi l∆∞u.")
            self.tab_widget.setCurrentIndex(0)
            self.file_name_edit.setFocus()
            return

        full_file_name = f"{file_name_base}.py"
        save_path = self.algorithms_dir / full_file_name

        if save_path.exists():
            reply = QMessageBox.question(self, "Ghi ƒê√® File?",
                                         f"File '{full_file_name}' ƒë√£ t·ªìn t·∫°i trong th∆∞ m·ª•c '{self.algorithms_dir.name}'.\nB·∫°n c√≥ mu·ªën ghi ƒë√® kh√¥ng?",
                                         QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            if reply == QMessageBox.No:
                return

        try:
            self.algorithms_dir.mkdir(parents=True, exist_ok=True)
            save_path.write_text(self.generated_code, encoding='utf-8')
            QMessageBox.information(self, "L∆∞u Th√†nh C√¥ng",
                                    f"ƒê√£ l∆∞u thu·∫≠t to√°n v√†o:\n{save_path}\n\n"
                                    "B·∫°n c√≥ th·ªÉ c·∫ßn 'T·∫£i l·∫°i thu·∫≠t to√°n' trong ·ª©ng d·ª•ng ch√≠nh ƒë·ªÉ s·ª≠ d·ª•ng.")
            self.status_label.setText(f"Tr·∫°ng th√°i: ƒê√£ l∆∞u {full_file_name}")
            self.status_label.setStyleSheet("color: #28a745;")

        except IOError as e:
            QMessageBox.critical(self, "L·ªói L∆∞u File", f"Kh√¥ng th·ªÉ l∆∞u file thu·∫≠t to√°n:\n{e}")
            self.status_label.setText("Tr·∫°ng th√°i: L·ªói l∆∞u file")
            self.status_label.setStyleSheet("color: #dc3545;")
        except Exception as e:
            QMessageBox.critical(self, "L·ªói Kh√¥ng X√°c ƒê·ªãnh", f"ƒê√£ x·∫£y ra l·ªói khi l∆∞u file:\n{e}")
            self.status_label.setText("Tr·∫°ng th√°i: L·ªói kh√¥ng x√°c ƒë·ªãnh khi l∆∞u")
            self.status_label.setStyleSheet("color: #dc3545;")

    def closeEvent(self, event):
        """Handle the dialog closing event."""
        try:
            self._save_api_key()
        except Exception as e:
             logging.error(f"Error saving API key during closeEvent: {e}")

        if self.gemini_thread and self.gemini_thread.is_alive():
             logging.warning("Gemini thread is still alive upon closing dialog (daemon thread, should terminate with app).")

        super().closeEvent(event)

        app_instance = QApplication.instance()
        if app_instance:
             logging.debug("Attempting to quit QApplication event loop.")
             app_instance.quit()

        logging.warning("Attempting sys.exit(0) to terminate.")
        sys.exit(0)


def run_gemini_algorithm_builder(parent=None, algorithms_dir=None):
    if not HAS_GEMINI:
         QMessageBox.critical(parent, "Thi·∫øu Th∆∞ Vi·ªán", "Ch·ª©c nƒÉng n√†y y√™u c·∫ßu th∆∞ vi·ªán 'google-generativeai'.\nVui l√≤ng c√†i ƒë·∫∑t b·∫±ng l·ªánh:\n\npip install google-generativeai")
         return

    CONFIG_DIR.mkdir(parents=True, exist_ok=True)

    dialog = AlgorithmGeminiBuilderDialog(parent, algorithms_dir)
    dialog.exec_()


if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
    app = QApplication(sys.argv)

    CONFIG_DIR.mkdir(parents=True, exist_ok=True)
    test_algo_dir = ALGORITHMS_DIR_DEFAULT
    test_algo_dir.mkdir(exist_ok=True)
    print(f"Testing Gemini builder, will save algorithms to: {test_algo_dir}")
    print(f"API Key will be loaded/saved from/to: {API_KEY_FILE}")

    if not ICON_FILE.is_file():
        try:
            print(f"INFO: Dummy icon {ICON_FILE} not found. Create it manually or ignore icon warning.")
        except Exception as e:
            print(f"Could not check/create dummy icon file: {e}")


    run_gemini_algorithm_builder(algorithms_dir=test_algo_dir)

    exit_code = app.exec_()
    logging.info(f"QApplication event loop finished with exit code: {exit_code}")
    sys.exit(exit_code)
